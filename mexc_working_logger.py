#!/usr/bin/env python3
"""
MEXC Working Logger - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π MEXC
"""
import requests
import json
import time
import hmac
import hashlib
import websocket
import threading
from pathlib import Path
from datetime import datetime
import signal
import sys

# Configuration
TRADES_LOG = Path("logs/mexc_working_trades.jsonl")
EVENTS_LOG = Path("logs/mexc_working_events.jsonl")
CONNECTION_LOG = Path("logs/mexc_working_connection.jsonl")
TRADES_LOG.parent.mkdir(parents=True, exist_ok=True)

class MEXCWorkingLogger:
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.mexc.com"
        self.ws_url = "wss://wbs.mexc.com/ws"
        
        # Session tracking
        self.session_start = None
        self.trade_count = 0
        self.event_count = 0
        self.is_running = False
        self.ws = None
        self.subscription_active = False
        
        # Setup signal handlers
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        print(f"\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É {signum}")
        self.stop_logging()
        sys.exit(0)
        
    def create_signature(self, params):
        query_string = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
        return hmac.new(
            self.api_secret.encode(),
            query_string.encode(),
            hashlib.sha256
        ).hexdigest()

    def get_listen_key(self):
        timestamp = int(time.time() * 1000)
        params = {"timestamp": timestamp}
        signature = self.create_signature(params)
        
        headers = {"X-MEXC-APIKEY": self.api_key}
        url = f"{self.base_url}/api/v3/userDataStream?timestamp={timestamp}&signature={signature}"
        
        try:
            response = requests.post(url, headers=headers, timeout=10)
            if response.status_code == 200:
                data = response.json()
                listen_key = data.get("listenKey")
                if listen_key:
                    self.log_connection_event("listenkey_success", {"length": len(listen_key)})
                    return listen_key
            else:
                self.log_connection_event("listenkey_error", {
                    "status": response.status_code,
                    "response": response.text[:200]
                })
        except Exception as e:
            self.log_connection_event("listenkey_exception", {"error": str(e)})
        return None

    def log_connection_event(self, event_type, details):
        try:
            entry = {
                "session_id": self.session_start,
                "timestamp": int(time.time() * 1000),
                "event_type": event_type,
                "details": details
            }
            
            with CONNECTION_LOG.open("a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\\n")
                
        except Exception as e:
            print(f"‚ùå Connection log error: {e}")

    def log_all_events(self, event_data):
        try:
            entry = {
                "session_id": self.session_start,
                "timestamp": int(time.time() * 1000),
                "event_id": self.event_count,
                "raw_data": event_data
            }
            
            with EVENTS_LOG.open("a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\\n")
            
            self.event_count += 1
            
        except Exception as e:
            print(f"‚ùå Event log error: {e}")

    def log_mexc_trade_event(self, mexc_data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π MEXC –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MEXC —Ñ–æ—Ä–º–∞—Ç–∞
            d = mexc_data.get("d", {})
            
            entry = {
                "session_id": self.session_start,
                "timestamp": mexc_data.get("t", int(time.time() * 1000)),
                "datetime": datetime.now().isoformat(),
                "trade_id": self.trade_count,
                
                # –î–∞–Ω–Ω—ã–µ MEXC —Å–æ–±—ã—Ç–∏—è
                "asset": d.get("a"),  # –ê–∫—Ç–∏–≤ (LIF3, USDT, MX)
                "operation": d.get("o"),  # –û–ø–µ—Ä–∞—Ü–∏—è (ENTRUST, ENTRUST_PLACE)
                "free_balance": float(d.get("f", 0)),  # –°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å
                "free_delta": float(d.get("fd", 0)),  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ
                "locked_balance": float(d.get("l", 0)),  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                "locked_delta": float(d.get("ld", 0)),  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
                "change_time": d.get("c"),  # –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                "change_id": d.get("cd"),  # ID –∏–∑–º–µ–Ω–µ–Ω–∏—è
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                "event_type": self.analyze_mexc_event(d),
                
                # –ü–æ–ª–Ω—ã–µ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                "raw_mexc_data": mexc_data
            }
            
            with TRADES_LOG.open("a", encoding="utf-8") as f:
                f.write(json.dumps(entry, ensure_ascii=False) + "\\n")
            
            self.trade_count += 1
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            asset = entry.get("asset", "")
            operation = entry.get("operation", "")
            event_type = entry.get("event_type", "")
            free_delta = entry.get("free_delta", 0)
            locked_delta = entry.get("locked_delta", 0)
            
            print("\\n" + "üéØ" * 50)
            print(f"üìä –¢–û–†–ì–û–í–û–ï –°–û–ë–´–¢–ò–ï #{self.trade_count:03d}")
            print(f"üí± –ê–∫—Ç–∏–≤: {asset}")
            print(f"üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {operation}")
            print(f"üìã –¢–∏–ø: {event_type}")
            print(f"üí∞ –°–≤–æ–±–æ–¥–Ω–æ: {free_delta:+.2f}")
            print(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked_delta:+.2f}")
            print(f"‚è∞ {datetime.now().strftime('%H:%M:%S.%f')[:-3]}")
            print("üéØ" * 50)
            
        except Exception as e:
            print(f"‚ùå MEXC trade log error: {e}")

    def analyze_mexc_event(self, d):
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è MEXC"""
        operation = d.get("o", "")
        free_delta = float(d.get("fd", 0))
        locked_delta = float(d.get("ld", 0))
        
        if operation == "ENTRUST_PLACE":
            if locked_delta > 0:
                return "ORDER_PLACED"  # –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω
            else:
                return "ORDER_UNKNOWN"
        elif operation == "ENTRUST":
            if locked_delta < 0 and free_delta > 0:
                return "ORDER_CANCELED"  # –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω
            elif locked_delta < 0 and free_delta == 0:
                return "ORDER_FILLED"  # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
            elif locked_delta == 0 and free_delta > 0:
                return "TRADE_SETTLED"  # –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            else:
                return "ORDER_MODIFIED"  # –û—Ä–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω
        else:
            return f"UNKNOWN_{operation}"

    def send_subscription(self, ws):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è MEXC"""
        subscription = {
            "method": "SUBSCRIPTION",
            "params": ["spot@private.account.v3.api"],
            "id": 1
        }
        
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {subscription}")
            ws.send(json.dumps(subscription))
            self.log_connection_event("subscription_sent", subscription)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def on_ws_message(self, ws, message):
        try:
            data = json.loads(message)
            self.log_all_events(data)
            
            print(f"\\nüì® Event #{self.event_count}: {json.dumps(data, ensure_ascii=False)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            if "id" in data and data.get("id") == 1:
                msg = data.get("msg", "")
                if "spot@private.account.v3.api" in msg:
                    print("‚úÖ –ü–û–î–ü–ò–°–ö–ê –ù–ê MEXC –°–û–ë–´–¢–ò–Ø –ê–ö–¢–ò–í–ù–ê!")
                    self.subscription_active = True
                    self.log_connection_event("subscription_confirmed", data)
                    return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π MEXC —Ñ–æ—Ä–º–∞—Ç–∞
            if "c" in data and data.get("c") == "spot@private.account.v3.api":
                print("üî• MEXC –¢–û–†–ì–û–í–û–ï –°–û–ë–´–¢–ò–ï!")
                self.log_mexc_trade_event(data)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if "code" in data:
                code = data.get("code", 0)
                msg = data.get("msg", "")
                
                if msg == "method is empty.":
                    print("üîß –°–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É...")
                    self.send_subscription(ws)
                elif msg == "PONG":
                    print("üèì PONG")
                elif msg == "Wrong listen key":
                    print("‚ùå Wrong listen key - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.reconnect()
                else:
                    print(f"‚ÑπÔ∏è  –ö–æ–¥ {code}: {msg}")
            
            # Ping/Pong
            if "ping" in data:
                pong_data = {"pong": data["ping"]}
                ws.send(json.dumps(pong_data))
                print("üèì Ping -> Pong")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def on_ws_error(self, ws, error):
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {error}")
        self.log_connection_event("ws_error", {"error": str(error)})

    def on_ws_close(self, ws, close_status_code, close_msg):
        print(f"üîå WebSocket –∑–∞–∫—Ä—ã—Ç: {close_status_code} - {close_msg}")
        self.subscription_active = False
        self.log_connection_event("ws_closed", {
            "code": close_status_code,
            "message": close_msg
        })

    def on_ws_open(self, ws):
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        self.log_connection_event("ws_opened", {"timestamp": int(time.time() * 1000)})
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        def delayed_subscription():
            time.sleep(3)
            print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
            self.send_subscription(ws)
        
        sub_thread = threading.Thread(target=delayed_subscription, daemon=True)
        sub_thread.start()

    def start_websocket(self, listen_key):
        ws_url = f"{self.ws_url}?listenKey={listen_key}"
        
        self.ws = websocket.WebSocketApp(
            ws_url,
            on_message=self.on_ws_message,
            on_error=self.on_ws_error,
            on_close=self.on_ws_close,
            on_open=self.on_ws_open
        )
        
        def run_ws():
            self.ws.run_forever(ping_interval=60, ping_timeout=10)
        
        ws_thread = threading.Thread(target=run_ws, daemon=True)
        ws_thread.start()
        return ws_thread

    def reconnect(self):
        if not self.is_running:
            return
            
        print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        self.subscription_active = False
        
        if self.ws:
            self.ws.close()
        
        listen_key = self.get_listen_key()
        if listen_key:
            self.start_websocket(listen_key)

    def start_logging(self):
        self.session_start = int(time.time())
        self.trade_count = 0
        self.event_count = 0
        self.is_running = True
        self.subscription_active = False
        
        print("üéØ MEXC WORKING LOGGER - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø")
        print("=" * 70)
        print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π MEXC")
        print("=" * 70)
        print(f"üìä Session ID: {self.session_start}")
        print(f"üìÅ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: {TRADES_LOG}")
        print(f"üìÅ –í—Å–µ —Å–æ–±—ã—Ç–∏—è: {EVENTS_LOG}")
        print(f"üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {CONNECTION_LOG}")
        print("=" * 70)
        
        self.log_connection_event("session_start", {
            "session_id": self.session_start,
            "mode": "working_mexc_logger"
        })
        
        # –ü–æ–ª—É—á–∞–µ–º listenKey
        listen_key = self.get_listen_key()
        if not listen_key:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å listenKey")
            return False
        
        print("‚úÖ ListenKey –ø–æ–ª—É—á–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
        self.start_websocket(listen_key)
        
        # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è MEXC...")
        for i in range(20):
            time.sleep(1)
            
            status = "ACTIVE" if self.subscription_active else "WAITING"
            print(f"   {i+1:2d}/20: {status} | Events: {self.event_count}")
            
            if self.subscription_active:
                break
        
        print("\\nüöÄ –õ–û–ì–ì–ï–† –ì–û–¢–û–í –ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù!")
        print("üéØ –¢–æ—Ä–≥—É–π—Ç–µ –≤ MetaScalp - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è!")
        print("üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:")
        print("   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
        print("   ‚úÖ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤") 
        print("   ‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
        print("   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤")
        print("üõë Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 70)
        
        try:
            while self.is_running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        finally:
            self.stop_logging()
        
        return True

    def stop_logging(self):
        self.is_running = False
        
        if self.ws:
            self.ws.close()
        
        duration = int(time.time()) - self.session_start if self.session_start else 0
        
        self.log_connection_event("session_end", {
            "duration_seconds": duration,
            "total_trades": self.trade_count,
            "total_events": self.event_count
        })
        
        print(f"\\n‚èπÔ∏è  –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {self.trade_count}")
        print(f"üìã –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {self.event_count}")
        print(f"üìÅ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def load_config():
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        return config["api_key"], config["api_secret"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ config.json: {e}")
        return None, None

def main():
    print("üéØ MEXC WORKING LOGGER")
    print("–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥-–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    api_key, api_secret = load_config()
    if not api_key or not api_secret:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –≤ config.json")
        return
    
    logger = MEXCWorkingLogger(api_key, api_secret)
    success = logger.start_logging()

if __name__ == "__main__":
    main()